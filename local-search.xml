<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MacOS + Hexo + Github个人博客搭建</title>
    <link href="/2020/03/03/MacOS+Hexo+Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/03/03/MacOS+Hexo+Github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="MacOS-Hexo-Github个人博客搭建"><a href="#MacOS-Hexo-Github个人博客搭建" class="headerlink" title="MacOS + Hexo + Github个人博客搭建"></a>MacOS + Hexo + Github个人博客搭建</h1><blockquote><p>本篇博客主要用于记录搭建的全部过程，以及其中踩的一些坑</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>搭建博客之前要先安装<strong>Node.js</strong>和<strong>Git</strong>，可按照一下方式进行安装。</p><h3 id="安装Node-js和Git"><a href="#安装Node-js和Git" class="headerlink" title="安装Node.js和Git"></a>安装Node.js和Git</h3><ul><li>利用Homebrew进行安装，没有Homebrew的自行到<a href="https://brew.sh" target="_blank" rel="noopener">官网</a>，按照指定命令安装。</li><li>输入<strong><code>brew install node</code></strong>开始安装Node.js</li><li>输入<strong><code>brew install git</code></strong>开始安装Git</li></ul><h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><ul><li>输入<strong><code>node -v</code></strong>和<strong><code>Git --version</code></strong>如果显示相关版本信息，则安装成功</li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>准备工作做好后，开始安装Hexo。<br><strong><code>sudo npm install -g hexo</code></strong><br>⚠️ <em>一定要注意的就是，这里一定进行sudo操作，不然无法安装</em></p><h2 id="本地初始化博客"><a href="#本地初始化博客" class="headerlink" title="本地初始化博客"></a>本地初始化博客</h2><ul><li>首先，在一个你要创建博客的目录下新建一个文件夹。这里我的文件夹叫<strong>MyBlog</strong>，然后进入<strong>MyBlog</strong></li></ul><p><strong><code>cd MyBlog</code></strong>    </p><ul><li>输入一下命令，以进行初始化本地的博客文件。</li></ul><p><strong><code>hexo init</code></strong></p><ul><li>然后安装所需要的环境依赖</li></ul><p><strong><code>sudo npm install</code></strong></p><ul><li>之后依次执行一下两个命令，便可以在<a href="https://localhost:4000" target="_blank" rel="noopener">本地</a>查看自己的博客</li></ul><p><strong><code>hexo g</code></strong><br><strong><code>hexo s</code></strong></p><h2 id="使本地博客关联Github"><a href="#使本地博客关联Github" class="headerlink" title="使本地博客关联Github"></a>使本地博客关联Github</h2><p>这里需要说明的就是，由于Github托管文件资源是免费的，所以这是我这种<strong>穷逼</strong>租不起服务器的绝佳方法，如果你是土豪，以下内容就不用看了。</p><h3 id="Github仓库设置"><a href="#Github仓库设置" class="headerlink" title="Github仓库设置"></a>Github仓库设置</h3><ul><li>在Github上新建一个仓库，然后将仓库取名为<strong>username.github.io</strong>，其中username就是你的Github账户名，并且只能是你的账户名。<br><img src="/img/myGithub.png" srcset="/img/loading.gif" alt="image1"></li><li>然后利用编辑器打开<strong>MyBlog</strong>文件夹下的<em>_config.yml</em>文件，然后将文档最后的<em>deploy</em>修改为以下内容<pre><code class="yml">deploy:  type: git  repository: https://github.com/username/username.github.io  branch: master</code></pre> 将其中的<em>username</em>替换为自己的Github账户名即可。严格注意大小写。</li><li>依次执行以下命令，生成静态文件并将其上传至Github</li></ul><p><strong><code>hexo g</code></strong><br><strong><code>hexo d</code></strong><br>⚠️ 如果执行<strong><code>hexo d</code></strong>时出现错误，则执行<strong><code>npm install hexo-deployer-git --save</code></strong></p><p>之后，本地的博客就与Github关联上了，之后要更新博客时，只需依次执行<strong><code>hexo clean</code></strong>、<strong><code>hexo g</code></strong>和<strong><code>hexo d</code></strong>即可。</p><h2 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h2><p>Hexo初始安装时，默认的主题是<strong>landscape</strong>，可以根据自己的喜好自行选择喜欢的主题</p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><ul><li>到Hexo的主题页面选择自己感兴趣的主题进行下载。</li><li>然后将下载好的主题文件解压，放到themes文件夹中，与<strong>landscape</strong>同级</li></ul><h3 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h3><ul><li>我下载的主题是<strong>Fluid</strong>，这里以其为例。<strong>必要的设置</strong>如下所示：<pre><code class="yml">highlight:  enable: false  # 关闭默认的代码高亮theme: fluid  # 指定主题language: zh-CN  # 指定语言，可不改</code></pre></li></ul><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>关于主题详细的配置就不在此赘述，献上主题官方的使用<a href="https://hexo.fluid-dev.com/docs/guide/" target="_blank" rel="noopener">指南</a>，非常详细，配置起来也相对简单。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XCode关于OpenCV + OpenCL + OpenMP的配置</title>
    <link href="/2020/03/03/opencv+opencl+openmp/"/>
    <url>/2020/03/03/opencv+opencl+openmp/</url>
    
    <content type="html"><![CDATA[<h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><blockquote><p>OpenCL是CUDA的替代品，能够利用GPU执行OpenCV的图形的大量计算；而OpenMP时开放多核编程语言，本质上还是利用CPU</p></blockquote><h3 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h3><ul><li>利用Homebrew安装opencv（C++）</li></ul><p><strong><code>brew install opencv</code></strong></p><ul><li><p>安装的过程中，brew就已经自动执行cmake将opencv包编译好了，所以所有的动态库文件都在<strong><code>/usr/local/Cellar/opencv/4.2.0_1/lib</code></strong>路径下</p></li><li><p>创建一个XCode项目，选择command line，然后将<strong><code>Search Paths</code></strong>下的两个头文件和库文件搜索路径填好</p><ul><li><strong><code>Header Search Paths = &#39;/usr/local/include/opencv4&#39;</code></strong></li><li><strong><code>Library Search Paths = &#39;/usr/local/Cellar/opencv/4.2.0_1/lib&#39;</code></strong></li></ul></li><li><p>之后就要将动态库文件全部链接进项目中，找到<strong><code>Build Phases</code></strong>，然后将opencv文件夹里的lib中的所有动态库文件添加进去即可。<br>⚠️ 在链接库文件时，<strong>一定要将原本的lib文件夹copy一份</strong>，然后链接这个复制后的文件夹里的库文件！！！</p></li></ul><h3 id="OpenCL"><a href="#OpenCL" class="headerlink" title="OpenCL"></a>OpenCL</h3><p>这里要说明一下，安装的时候一定要注意不同的设备所支持的OpenCL版本，目前所有苹果设备支持的最高版本为1.2。同时Apple内置了OpenCL的包，所以只需要在<strong><code>Build Phases</code></strong>中将OpenCL链接进去就可以。</p><h3 id="OpenMP"><a href="#OpenMP" class="headerlink" title="OpenMP"></a>OpenMP</h3><p>网上暂时还没有详细且有效的配置教程，这里就说一下其中一个教程的做法</p><ul><li>利用Homebrew安装<strong><em>llvm</em></strong></li></ul><p><strong><code>brew install llvm</code></strong></p><ul><li>然后像配置OpenCV一样，将<strong><code>Search Paths</code></strong>下的两个搜索路径填好<ul><li><strong><code>Hearder Search Paths = &#39;/usr/local/Cellar/llvm/9.0.1/lib/clang/9.0.1/include&#39;</code></strong></li><li><strong><code>Library Search Paths = &#39;/usr/local/Cellar/llvm/9.0.1/lib/clang/9.0.1/lib&#39;</code></strong></li></ul></li><li>接下来配置参数<br><img src="/img/otherCFlag.png" srcset="/img/loading.gif" alt="image1"></li><li>然后创建一个名为CC的User变量<br><img src="/img/userDefine.png" srcset="/img/loading.gif" alt="image2"><br><img src="/img/CCUser.png" srcset="/img/loading.gif" alt="image3"></li><li>创建软链接</li></ul><p><strong><code>ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang-omp ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang++-omp</code></strong></p><ul><li>全局搜索，找出<strong><code>libiomp5.dylib</code></strong>库文件，然后将其复制并粘贴到<strong><code>/usr/local/lib/libiomp5.dylib</code></strong>路径下，一定要粘贴到这里，不然无法使用</li><li>最后在XCode项目里将这个库文件链接进去理论上就可以了</li></ul><p>⚠️ 但是最后，一顿操作猛如虎，运行的时候报出了一堆错误，OpenMP还是用不了，而且网上也找不到别的详细的教程了，太坑了。</p>]]></content>
    
    
    <categories>
      
      <category>OpenCV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV项目相关配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
