<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>XCode关于OpenCV + OpenCL + OpenMP的配置</title>
    <link href="/2020/03/03/opencv+opencl+openmp/"/>
    <url>/2020/03/03/opencv+opencl+openmp/</url>
    
    <content type="html"><![CDATA[<p>##配置项目</p><blockquote><p>OpenCL时CUDA的替代品，能够利用GPU执行OpenCV的图形的大量计算；而OpenMP时开放多核编程语言，本质上还是利用CPU</p></blockquote><h3 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h3><ul><li>利用Homebrew安装opencv（C++）</li></ul><p><strong><code>brew install opencv</code></strong></p><ul><li><p>安装的过程中，brew就已经自动执行cmake将opencv包编译好了，所以所有的动态库文件都在<strong><code>/usr/local/Cellar/opencv/4.2.0_1/lib</code></strong>路径下</p></li><li><p>创建一个XCode项目，选择command line，然后将<strong><code>Search Paths</code></strong>下的两个头文件和库文件搜索路径填好</p><ul><li><strong><code>Header Search Paths = &#39;/usr/local/include/opencv4&#39;</code></strong></li><li><strong><code>Library Search Paths = &#39;/usr/local/Cellar/opencv/4.2.0_1/lib&#39;</code></strong></li></ul></li><li><p>之后就要将动态库文件全部链接进项目中，找到<strong><code>Build Phases</code></strong>，然后将opencv文件夹里的lib中的所有动态库文件添加进去即可。<br>⚠️ 在链接库文件时，<strong>一定要将原本的lib文件夹copy一份</strong>，然后链接这个复制后的文件夹里的库文件！！！</p></li></ul><h3 id="OpenCL"><a href="#OpenCL" class="headerlink" title="OpenCL"></a>OpenCL</h3><p>这里要说明一下，安装的时候一定要注意不同的设备所支持的OpenCL版本，目前所有苹果设备支持的最高版本为1.2。同时Apple内置了OpenCL的包，所以只需要在<strong><code>Build Phases</code></strong>中将OpenCL链接进去就可以。</p><p>###OpenMP<br>网上暂时还没有详细且有效的配置教程，这里就说一下其中一个教程的做法</p><ul><li>利用Homebrew安装<strong><em>llvm</em></strong></li></ul><p><strong><code>brew install llvm</code></strong></p><ul><li>然后像配置OpenCV一样，将<strong><code>Search Paths</code></strong>下的两个搜索路径填好<ul><li><strong><code>Hearder Search Paths = &#39;/usr/local/Cellar/llvm/9.0.1/lib/clang/9.0.1/include&#39;</code></strong></li><li><strong><code>Library Search Paths = &#39;/usr/local/Cellar/llvm/9.0.1/lib/clang/9.0.1/lib&#39;</code></strong></li></ul></li><li>接下来配置参数<br><img src="https://img-blog.csdn.net/20180423152204220" srcset="/img/loading.gif" alt="image1"></li><li>然后创建一个名为CC的User变量<br><img src="https://img-blog.csdn.net/20180423152637399" srcset="/img/loading.gif" alt="image2"><br><img src="https://img-blog.csdn.net/20180423153918875" srcset="/img/loading.gif" alt="image3"></li><li>创建软链接</li></ul><p><strong><code>ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang-omp ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang++-omp</code></strong></p><ul><li>全局搜索，找出<strong><code>libiomp5.dylib</code></strong>库文件，然后将其复制并粘贴到<strong><code>/usr/local/lib/libiomp5.dylib</code></strong>路径下，一定要粘贴到这里，不然无法使用</li><li>最后在XCode项目里将这个库文件链接进去理论上就可以了</li></ul><p>⚠️ 但是最后，一顿操作猛如虎，运行的时候报出了一堆错误，OpenMP还是用不了，而且网上也找不到别的详细的教程了，太坑了。</p>]]></content>
    
    
    <categories>
      
      <category>OpenCV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV项目相关配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/03/03/hello-world/"/>
    <url>/2020/03/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
